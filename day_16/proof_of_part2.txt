This is a proof of the last step of part 2. Namely, we want to prove that if there exists a unique valid mapping from columns (corresponding to numbers on the ticket) to rules, then there must be a column that only maps to a single rule. It follows from this theorem that you can find the unique valid mapping by looking for the column that maps to a single rule, removing the rule from all other column mappings, and iterating.

In this proof, I will denote columns by lower-case letters and rules by upper-case letters. To give some terminology: if some column c can validly map to rules R and S, then we can write this as c -> R S, or in some cases, R <- c -> S. If some column c maps to rule R in the unique valid mapping, then we say c corresponds to R.

Let's assume for the sake of contradiction that all columns map to more than one rule. Let one of those columns be a, and let a correspond to rule A. By assumption, we know that a also maps to at least one other rule, which we call B. So we have that a -> A B.

There exists some column that corresponds to rule B, let's call this column b. b must map to at least one other rule by assumption. If it maps back to rule A, then we could swap correspondences, so a corresponds to B and b corresponds to A, and this would create a different valid mapping. Since we stated there was a unique valid mapping, this is a contradiction. It follows then that b must map to some other rule, which we will call C. We now have that b -> B C.

There exists some column that corresponds to rule C, let's call this column c. c must map to at least one other rule by assumption. If it maps back to rule A, then we could swap correspondences, so a corresponds to B, b corresponds to C, and c corresponds to A, and this would create a different valid mapping. Similarly, if it maps back to rule B, we could again swap correspondences such that b corresponds to C and c corresponds to B. Again it follows that C must map to some other rule, which we will call D. We now have that c -> C D.

By the logic above, we can never have a loop. To be more explicit about what I mean, it can never be the case for which A <- a -> B <- b -> C <- c -> D ... X <- x -> A. If there were, as per the argument above, then are two valid mappings on these columns. First being a maps to A, b maps to B, and so on until x maps to X, and second being that a maps to B, b maps to C, and so on until x maps to A. This contradicts the problem statement.

Since we cannot have a loop, each new column in our chain must map to a new rule, creating an endless chain of new columns mapping to new rules. However there are only a finite number of rules and so this chain must eventually loop around. This is a contradiction - so our original assumption that every column maps to more than one rule is false, and there must exist a column that maps to a single rule.